pipeline:
  name: Build and Deploy
  identifier: Deploy
  projectIdentifier: Martin
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: Build
        identifier: Build
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
            override: true
            paths: []
          execution:
            steps:
              - step:
                  type: Run
                  name: Build and Test
                  identifier: Build_and_Test
                  spec:
                    connectorRef: account.dockerhub
                    image: maven:3.9.6-eclipse-temurin-17
                    shell: Bash
                    command: |-
                      set -e
                      cd app
                      BUILD_VERSION="1.0.<+pipeline.sequenceId>"
                      mvn -B -q \
                        -Dbuild.version="${BUILD_VERSION}" \
                        -Dbuild.sequence="<+pipeline.sequenceId>" \
                        -Dbuild.commit="<+codebase.commitSha>" \
                        clean package
                      JAR="$(ls target/*-SNAPSHOT.jar target/*.jar 2>/dev/null | head -n1)"
                      test -n "$JAR"
                      mkdir -p /harness/out && cp "$JAR" /harness/out/stocktrack.jar
                    reports:
                      type: JUnit
                      spec:
                        paths:
                          - "**/*.xml"
              - step:
                  type: Sonarqube
                  name: Sonarqube
                  identifier: Sonarqube
                  spec:
                    mode: orchestration
                    config: default
                    target:
                      type: repository
                      detection: auto
                    advanced:
                      log:
                        level: info
                    auth:
                      access_token: <+secrets.getValue('sonartoken')>
                      domain: https://sonar.harness.io/
                      ssl: true
                    tool:
                      exclude: "**/*.java"
                      project_key: stocktrack
              - step:
                  type: ArtifactoryUpload
                  name: ArtifactoryUpload
                  identifier: ArtifactoryUpload
                  spec:
                    connectorRef: account.Artifactory
                    target: stocktrack-libs-release-local/com/stocktrack/stocktrack/1.0.<+pipeline.sequenceId>/stocktrack-1.0.<+pipeline.sequenceId>.jar
                    sourcePath: app/target/stocktrack-1.0.<+pipeline.sequenceId>.jar
          buildIntelligence:
            enabled: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec:
              size: large
    - stage:
        name: Deploy
        identifier: Deploy
        description: ""
        type: Deployment
        spec:
          deploymentType: CustomDeployment
          customDeploymentRef:
            templateRef: Ansible
            versionLabel: v1.0
          service:
            serviceRef: stocktrack
            serviceInputs:
              serviceDefinition:
                type: CustomDeployment
                spec:
                  artifacts:
                    primary:
                      sources:
                        - identifier: stocktrack
                          type: ArtifactoryRegistry
                          spec:
                            artifactPath: stocktrack-1.0.54.jar
          execution:
            steps:
              - step:
                  name: Fetch Instances
                  identifier: fetchInstances
                  type: FetchInstanceScript
                  timeout: 10m
                  spec: {}
              - step:
                  type: ShellScript
                  name: Ping
                  identifier: Ping
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |-
                          set -euo pipefail

                          echo "DEBUG: stage.output.hosts"
                          echo '<+json.format(<+stage.output.hosts>)>'

                          WORKDIR="$(mktemp -d)"; trap 'rm -rf "$WORKDIR"' EXIT
                          cd "$WORKDIR"

                          # 1) Dump stage output array to JSON
                          echo '<+json.format(<+stage.output.hosts>)>' > hosts.json

                          # 2) Build temporary inventory (works for objects or strings)
                          {
                              echo "[targets]"
                              jq -r '(. // []) 
                                      | map( if type=="string" then {ip: .} else . end )
                                      | .[] 
                                      | select(.ip != null) 
                                      | "\(.ip) ansible_user=\(.ansible_user // "<+infra.variables.ansible_user>") ansible_ssh_common_args='\''-o StrictHostKeyChecking=no'\''"' hosts.json
                          } > hosts.ini

                          echo "Inventory built:"
                          cat hosts.ini

                          # 3) Run Ansible ping
                          echo "Pinging targets..."
                          ansible -i hosts.ini targets -m ping -o -T 5 --forks 20

                          echo "Ping step complete."
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
              - stepGroup:
                  name: Deploy
                  identifier: Deploy
                  steps:
                    - step:
                        name: Ping Targets
                        identifier: Ping_Targets
                        template:
                          templateRef: Ansible_Ping_Targets
                          versionLabel: v0.1
                    - step:
                        name: Run Playbook
                        identifier: Run_Playbook
                        template:
                          templateRef: Ansible_Run_Playbook
                          versionLabel: v0.1
                          templateInputs:
                            type: ShellScript
                            spec:
                              environmentVariables:
                                - name: playbook_path
                                  type: String
                                  value: <+input>
                                - name: artifact_url
                                  type: String
                                  value: <+artifact.path>
                                - name: dest_path
                                  type: String
                                  value: <+input>
            rollbackSteps: []
          environment:
            environmentRef: CIT1
            deployToAll: false
            infrastructureDefinitions:
              - identifier: linux
                inputs:
                  identifier: linux
                  type: CustomDeployment
                  spec:
                    variables:
                      - name: GIT_URL
                        type: String
                        value: https://github.com/mansong1/ansible_demo.git
                      - name: GIT_REF
                        type: String
                        value: master
                      - name: INV_PATH
                        type: String
                        value: inventory.ini
                      - name: GROUP_FILTER
                        type: String
                        value: all
                      - name: ANSIBLE_USER
                        type: String
                        value: ec2-user
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        delegateSelectors:
          - bofa
        when:
          pipelineStatus: Success
  properties:
    ci:
      codebase:
        connectorRef: account.Github
        repoName: StockTrack
        build: <+input>
  allowStageExecutions: true
  fixedInputsOnRerun: true
